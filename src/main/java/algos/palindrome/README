# Problem 01 Palindrome Number

Given an integer x, return true if x is palindrome integer.
An integer is a palindrome when it reads the same backward as forward.

* For Example, 121 is a palindrome while 123 is not.

### Example 01:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.

### Example 02:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121.
From right to left, it becomes 121-.
Therefore it is not a palindrome.

### Example 03

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.


# Problem 02 Valid Palindrome

A phrase is a palindrome if, after converting all uppercase letters into lowercase letters
and removing all non-alphanumeric characters, it reads the same forward and backward.
Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

### Example 01

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.

### Example 02

```
Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.
```

### Example 03
```
Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.
```

# Problem 03 Valid Palindrome II

Given a string s, return true if the s can be palindrome after deleting at most one character from it.

### Example 01

```
Input: s = "aba"
Output: true
```

### Example 02

```
Input: s = "abca"
Output: true
Explanation: You could delete the character 'c'.
```

### Example 03

```
Input: s = "abc"
Output: false
```

# Continued Study
* Read [Geek For Geek Palindromes in Java](https://www.geeksforgeeks.org/java-program-to-check-whether-a-string-is-a-palindrome/)
* Read [Find Kth most occurring element](https://www.geeksforgeeks.org/find-kth-most-occurring-element-in-an-array/)
* Try [Break a Palindrome](https://leetcode.com/problems/break-a-palindrome/)



Approach: Two Pointers
Intuition

Let's start by thinking about how we can solve this problem without the optional deletion included. How can we check if a given string s is a palindrome?

A string is a palindrome if it reads the same forward as backwards.

For a string to be a palindrome, the first and last character must be the same, the second and the second last character must be the same, and so on. An efficient way to check if a string is a palindrome is to use two pointers.

Initialize one pointer at the start of the string and one at the end.
Compare the characters at these pointers - if they're different, the string can't be a palindrome. If they're the same, then move the pointers towards each other.
Continue until there is a mismatch (signifying the string is not a palindrome) or until the pointers meet each other (which would mean the string is a palindrome).
Current
4 / 5
We can write a handy helper function checkPalindrome(s, i, j) that implements this logic, where s is the string we are checking, and i and j are the left and right bounds we want to consider. For example, to check if the entire string s is a palindrome, i will start at 0 and j will start at s.length() - 1.


An important thing to notice is that once we verify two characters match at positions i and j, we only care about the indices between i and j. For example, with s = 'racecar', after verifying that s[0] and s[6] are the same character, we only care about indices 1 through 5, which represent the substring 'aceca'. If 'aceca' is a palindrome, then 'racecar' is a palindrome as well.

For our purposes, we can basically pretend that matched characters no longer exist. For example, after verifying that the first and last characters of 'racecar' match, we can reframe the problem as checking if 'aceca' can be a palindrome with at most one deletion.

Let's assume we have some string s = 'abbxa'. On its own, s is not a palindrome. However, if we delete the 'x', then s becomes 'abba', which is a palindrome. If we use the same algorithm in checkPalindrome, we will see that the first and last characters match as 'a'. The pointers move inwards, and the "new" string we're focused on is 'bbx'.

The next check will be a mismatch - 'b' != 'x'. This means that our original string is not a palindrome. However, we can delete one character. If s can be a palindrome after one deletion, the deletion must be of one of these mismatched characters. Deleting the character 'b' gives us 'bx', and deleting the character 'x' gives us 'bb'. Because 'bb' is a palindrome (which we can verify using checkPalindrome), the original string 'abbxa' can become a palindrome with at most one character deletion.

Here's an animation that demonstrates the process using a slightly longer example:

Current
4 / 4
This leaves us two scenarios:

s is a palindrome - great, we can just return true.

Somewhere in s, there will be a pair of mismatched characters. We must use our allowed deletion on one of these characters. Try both options - if neither results in a palindrome, then return false. Otherwise, return true. We can "delete" the character at j by moving our bounds to (i, j - 1). Likewise, we can "delete" the character at i by moving our bounds to (i + 1, j).

Algorithm

Create a helper function checkPalindrome that takes a string s, and two pointers i and j. This function returns a boolean indicating if s.substring(i, j) is a palindrome. Implementation details for this function can be found in the first section of this article.

Initialize two pointers, i = 0 and j = s.length() - 1.

While i < j, check if the characters at indices i and j match. If they don't, that means we must spend our deletion on one of these characters. Try both options using checkPalindrome. In other words, return true if either checkPalindrome(s, i, j -1) or checkPalindrome(s, i + 1, j) is true.

If we exit the while loop, that means the original string is a palindrome. Since we didn't need to use the deletion, we should return true.

Implementation


Complexity Analysis

Given NN as the length of s,

Time complexity: O(N)O(N).

The main while loop we use can iterate up to N / 2 times, since each iteration represents a pair of characters. On any given iteration, we may find a mismatch and call checkPalindrome twice. checkPalindrome can also iterate up to N / 2 times, in the worst case where the first and last character of s do not match.

Because we are only allowed up to one deletion, the algorithm only considers one mismatch. This means that checkPalindrome will never be called more than twice.

As such, we have a time complexity of O(N)O(N).

Space complexity: O(1)O(1).

The only extra space used is by the two pointers i and j, which can be considered constant relative to the input size.